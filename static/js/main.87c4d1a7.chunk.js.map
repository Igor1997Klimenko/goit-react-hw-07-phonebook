{"version":3,"sources":["Component/ContactForm/ContactForm.module.css","Component/ContactsListItem/ContactListItem.module.css","Component/ContactList/ContactList.module.css","Component/Filter/Filter.module.css","Component/Container/Container.module.css","redux/contacts-api.js","Component/ContactForm/ContactForm.jsx","Component/ContactsListItem/ContactSListItem.jsx","helpers/filterContacts.js","Component/ContactList/ContactList.jsx","Component/Container/Container.jsx","redux/toogleContacts.js","Component/Filter/Filter.jsx","App.js","redux/store.js","index.js"],"names":["module","exports","apiContacts","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","getContacts","query","url","method","providesTags","addContact","mutation","newContact","body","invalidatesTags","deleteContacts","id","useGetContactsQuery","useAddContactMutation","useDeleteContactsMutation","ContactForm","useState","name","setName","phone","setPhone","contacts","data","isLoading","handleInputChange","e","target","value","contactExits","find","contact","toUpperCase","className","styles","forma","onSubmit","preventDefault","alert","nanoid","toast","success","blockform","htmlFor","LabelForm","NamesForm","type","pattern","title","required","onChange","ButtonsContact","color","height","width","position","memo","ContactListItem","deleteContact","isDeleting","NumberContacts","onClick","DeleteContact","filterContacts","filterValue","filter","toLowerCase","includes","trim","ContactList","useSelector","state","s","map","ItemContacts","Container","children","toogleContacts","createSlice","initialState","reducers","contactsFilter","payload","actions","Filter","dispatch","useDispatch","placeholder","currentTarget","App","store","configureStore","reducer","middleware","getDefaultMiddleware","setupListeners","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.87c4d1a7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"blockform\":\"ContactForm_blockform__3huNa\",\"LabelForm\":\"ContactForm_LabelForm__4Fx8j\",\"NamesForm\":\"ContactForm_NamesForm__2pByf\",\"ButtonsContact\":\"ContactForm_ButtonsContact__2VhQn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ButtonsContact\":\"ContactListItem_ButtonsContact__3HfRW\",\"NumberContacts\":\"ContactListItem_NumberContacts__3q0-l\",\"DeleteContact\":\"ContactListItem_DeleteContact__1YeLD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList\":\"ContactList_ContactList__2XQpQ\",\"ItemContacts\":\"ContactList_ItemContacts__35lU3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LabelForm\":\"Filter_LabelForm__3PdFH\",\"NamesForm\":\"Filter_NamesForm__3oCvt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__1MKu8\"};","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nexport const apiContacts = createApi({\r\n    reducerPath: 'apiContacts',\r\n    baseQuery: fetchBaseQuery({\r\n        baseUrl: 'https://62727f8825fed8fcb5f54bcd.mockapi.io',\r\n    }),\r\n    tagTypes: ['Contact'],\r\n    endpoints: builder => ({\r\n        getContacts: builder.query({\r\n            query: () => ({\r\n                url: `/contacts`,\r\n                method: 'GET',\r\n            }),\r\n            providesTags: ['Contact'],\r\n        }),\r\n\r\n        addContact: builder.mutation({\r\n            query: newContact => ({\r\n                    url: '/contacts',\r\n                    method: 'POST',\r\n                    body: newContact,\r\n            }),\r\n             invalidatesTags: ['Contact'],\r\n        }),\r\n\r\n        deleteContacts: builder.mutation({\r\n            query: id => ({\r\n                url: `/contacts/${id}`,\r\n                method: 'DELETE',\r\n            }),\r\n            invalidatesTags: ['Contact'], \r\n        }),\r\n    }),\r\n});\r\nexport const { useGetContactsQuery, useAddContactMutation, useDeleteContactsMutation } = apiContacts;","import {useState,memo } from 'react'\nimport styles from '../ContactForm/ContactForm.module.css'\nimport { nanoid } from '@reduxjs/toolkit';\nimport { useAddContactMutation, useGetContactsQuery } from '../../redux/contacts-api';\nimport { BallTriangle } from 'react-loader-spinner';\nimport toast, { Toaster } from 'react-hot-toast';\n\nconst ContactForm = () => {\n    const [name, setName] = useState('');\n    const [phone, setPhone] = useState('');\n    const { data: contacts } = useGetContactsQuery();\n    const [addContact, {isLoading}] = useAddContactMutation();\n  \nconst handleInputChange = e => {\n        const { name, value } = e.target;\n        switch (name) {\n            case 'name':\n                setName(value)\n                break;\n\n            case 'phone':\n                setPhone(value)\n                break;\n\n            default:\n                return;\n        }\n    }\n    \nconst handleSubmit = e => {\n    e.preventDefault();\n    if(contactExits()){\n        alert(`${name} is already in contacts`)\n        return;\n    }\n    addContact({ name, phone, id: nanoid() });\n    setName('');\n    setPhone('');\n\n    toast.success('Contact added!');\n    };\n    \n    const contactExits = () => \n        contacts.find(contact =>\n            contact.name.toUpperCase() === name.toUpperCase() || contact.phone === phone);\n    \n        \n    \n\n    return(\n        <form className={styles.forma} onSubmit={handleSubmit}>\n            <div className={styles.blockform}>\n            <label htmlFor=\"\" className={styles.LabelForm}>\n                <span className={styles.NamesForm}>Name</span>\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                    required\n                    value={name}\n                    onChange={handleInputChange}\n                    />\n            </label>\n                \n                <label className={styles.LabelForm}>\n                <span className={styles.NamesForm}>Phone</span>\n                <input\n                    type=\"tel\"\n                    name=\"phone\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                    required\n                    value={phone}\n                    onChange={handleInputChange}\n                    />\n                </label>\n            </div>\n            <button\n                type=\"submit\"\n                className={styles.ButtonsContact}>\n                {isLoading ? <BallTriangle color=\"#00BFFF\" height={20} width={20} /> : 'Add contact'}\n            </button>\n            <Toaster position=\"top-right\"/>\n        </form>\n    );\n  }\n\n\nexport default memo(ContactForm);","import PropTypes from 'prop-types'; \nimport styles from './ContactListItem.module.css';\nimport { useDeleteContactsMutation } from '../../redux/contacts-api';\n\n\nconst ContactListItem = ({ id, name, phone }) => {\n    const [deleteContact, {isLoading: isDeleting}] = useDeleteContactsMutation();\n    return(\n        <>\n        <span className={styles.NumberContacts}>\n            {name}: {phone}\n        </span>\n            <button\n                className={styles.ButtonsContact}\n                type=\"button\"\n                onClick={() => deleteContact(id)}>\n                { isDeleting ? <div className={styles.DeleteContact}>Deleting...</div> : 'Delete'}\n            </button>\n        </>\n    );\n}\n\nContactListItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n};\n\nexport default ContactListItem;","const filterContacts = (contacts, filterValue) => {\n    return contacts.filter(({name}) =>\n        name.toLowerCase().includes(filterValue.toLowerCase().trim()))\n}\nexport default filterContacts;","import ContactListItem from '../ContactsListItem/ContactSListItem';\nimport s from './ContactList.module.css';\nimport filterContacts from '../../helpers/filterContacts';\nimport { useGetContactsQuery } from '../../redux/contacts-api';\nimport { useSelector } from 'react-redux';\n\nconst ContactList = () => {\n    const { data } = useGetContactsQuery();\n    const filterValue = useSelector((state) => state.contacts.filter)\n\n    return(\n        <ul className={s.ContactList}>\n            {data &&\n                filterContacts(data, filterValue).map(({ id, name, phone }) => (\n        <li className={s.ItemContacts} key={id}>\n            <ContactListItem\n                id={id}\n                name={name}\n                phone={phone}\n            />\n        </li>          \n    ))}\n    </ul>\n    )\n}\n\nexport default ContactList;","import PropTypes from 'prop-types'\nimport s from './Container.module.css'\n\nconst Container = ({children}) => {\n    return <div className={s.Container}>\n        {children}\n    </div>\n}\n\nContainer.propTypes = {\n    children: PropTypes.node,\n}\n\nexport default Container","import { createSlice } from '@reduxjs/toolkit';\r\nexport const toogleContacts = createSlice({\r\n  name: 'filter',\r\n  initialState: {\r\n    filter: '',\r\n  },\r\n  reducers: {\r\n    contactsFilter: (state, { payload }) => {\r\n      state.filter = payload;      \r\n    }    \r\n  },\r\n});\r\n\r\nexport const { contactsFilter } = toogleContacts.actions;\r\nexport default toogleContacts.reducer;\r\n\r\n","import styles from './Filter.module.css';\nimport { contactsFilter } from '../../redux/toogleContacts';\nimport { useDispatch } from 'react-redux';\n\nconst Filter = () => {\n    const dispatch = useDispatch();\n\n    const filterUsers = e => {\n        dispatch(contactsFilter(e.currentTarget.value));\n    };\n    return(\n        <label className={styles.LabelForm}>\n            <span className={styles.NamesForm}>Find contacts by name</span>\n            <input\n                type=\"text\"\n                name=\"filter\"\n                placeholder='filter contacts'\n                onChange={filterUsers} \n            />\n        </label>\n    );\n}\n\nexport default Filter;","import ContactForm from './Component/ContactForm/ContactForm';\nimport ContactList from './Component/ContactList/ContactList';\nimport Container from './Component/Container/Container';\nimport Filter from './Component/Filter/Filter';\n\nconst App = () => {\n\n   return(\n     <Container>\n     <h1>Phonebook</h1>\n    <ContactForm/>\n    <h2>Contacts</h2>\n       <Filter/>\n         <ContactList />\n    </Container>\n   );\n }\n\nexport default App;\n","\nimport { configureStore } from '@reduxjs/toolkit';\nimport { setupListeners } from '@reduxjs/toolkit/dist/query';\nimport { apiContacts } from './contacts-api';\nimport { toogleContacts } from './toogleContacts';\n\n\nexport const store = configureStore({\n\n  reducer: {\n    [apiContacts.reducerPath]: apiContacts.reducer,\n    contacts: toogleContacts.reducer,\n  },\n  middleware: getDefaultMiddleware => [\n    ...getDefaultMiddleware(),\n    apiContacts.middleware,\n  ],\n});\n\nsetupListeners(store.dispatch)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}